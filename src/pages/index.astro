---
import Layout from "../layouts/Layout.astro";
import { Chart } from "../components/Chart";
import fs from "fs";
import path from "path";

// Fetch data server-side in Astro
let db = {
	total_ner_today: 0,
	total_articles_today: 0,
	total_articles_week: 0,
	total_articles_total: 0,
};

try {
	const dbPath = path.join(process.cwd(), "public", "data", "db.json");
	const dbData = fs.readFileSync(dbPath, "utf-8");
	db = JSON.parse(dbData);
} catch (error) {
	console.error("Error loading db.json:", error);
}
---

<Layout title="NewsMaster">
	<!-- Hero Section -->
	<section id="hero-section" class="space-y-6 pb-8 pt-6 md:pb-12 md:pt-10 lg:py-32 min-h-screen flex flex-col justify-center">
		<div
			class="max-w-[64rem] flex flex-col items-center gap-4 text-center mx-auto"
		>
			<h1
				class="font-heading text-3xl sm:text-5xl md:text-6xl lg:text-7xl"
			>
				Find out what's happening in the 📰 today!
			</h1>
			<p
				class="max-w-[42rem] leading-normal text-muted-foreground sm:text-xl sm:leading-8 mb-8"
			>
				A dashboard updated daily, featuring the most important
				statistics in world news.
			</p>
			
			<!-- Animated scroll down indicator -->
			<div class="flex flex-col items-center animate-bounce">
				<p class="text-sm text-muted-foreground mb-2">Scroll down to explore</p>
				<svg 
					xmlns="http://www.w3.org/2000/svg" 
					width="24" 
					height="24" 
					viewBox="0 0 24 24" 
					fill="none" 
					stroke="currentColor" 
					stroke-width="2" 
					stroke-linecap="round" 
					stroke-linejoin="round" 
					class="h-6 w-6 text-muted-foreground"
				>
					<path d="M7 13l3 3 3-3"></path>
					<path d="M7 6l3 3 3-3"></path>
				</svg>
			</div>
		</div>
	</section>

	<!-- Recap Section - Today's Obsession -->
	<main class="container mx-auto px-4 py-8 max-w-6xl">
		<div id="recap-section" class="text-center mb-12 min-h-screen flex flex-col justify-center">
			<h1 class="text-4xl font-bold mb-4">
				<span
					class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"
				>
					TODAY THE WORLD IS OBSESSED BY
				</span>
				<br />
				<span
					id="top-entity"
					class="text-6xl font-black bg-gradient-to-r from-red-500 via-orange-500 to-yellow-500 bg-clip-text text-transparent drop-shadow-lg"
				>
				</span>
			</h1>
			<!-- World map showing how much each country talks about the top NER -->
			<div id="world-map-recap" class="mt-8"></div>
		</div>

		<!-- Temporal Trends Section -->
		<div id="temporal-section" class="mt-16 text-center min-h-screen flex flex-col justify-center">
			<h1 id="temporal-question" class="text-3xl font-bold mb-8">
				Has <span class="top-entity-ref text-purple-600">...</span> always
				been so hot?
			</h1>
			<!-- Topic trend graph for the top NER -->
			<div class="grid grid-cols-1 lg:grid-cols-7 gap-8 h-[400px]">
				<div class="border rounded-xl bg-card shadow-lg p-6 lg:col-span-4">
					<h3 class="text-lg font-semibold mb-4 text-left">
						Top 5 Topics of today
					</h3>
					<div id="temporal-table-recap" class="h-full"></div>
				</div>
				<div
					class="border rounded-xl bg-card shadow-lg p-6 flex flex-col lg:col-span-3"
				>
					<h3 class="text-lg font-semibold mb-4 text-left">
						7-Day Trend Evolution
					</h3>
					<div id="temporal-chart-recap" class="flex-1 min-h-0"></div>
				</div>
			</div>
		</div>

		<!-- Network Section -->
		<div id="network-section" class="mt-16 text-center min-h-screen flex flex-col justify-center">
			<h1 id="network-title" class="text-3xl font-bold mb-4">
				<span class="top-entity-ref text-green-600">...</span> POWER WEB
			</h1>
			<p class="text-muted-foreground mb-8">
				Click and drag to explore • Mouse wheel to zoom • Click nodes for
				details
			</p>
			<!-- Network graph filtered to only show nodes connected to the top NER -->
			<div
				id="network-recap"
				class="w-full h-[600px] border rounded-xl bg-card shadow-lg"
			>
			</div>
		</div>

		<!-- Statistics Section (replaces Insights) -->
		<div
			id="statistics-section"
			class="mt-16 text-center bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/10 dark:to-purple-950/10 rounded-xl border p-8 min-h-screen flex flex-col justify-center"
		>
			<h2 class="text-2xl font-bold mb-8">News Statistics</h2>
			<p
				class="max-w-[85%] leading-normal text-muted-foreground sm:text-lg sm:leading-7 mb-8 mx-auto"
			>
				We are constantly updating our database with the latest news
				from around the world. Our goal is to provide you with the most
				accurate and up-to-date information possible.
			</p>
			<div
				class="mx-auto grid max-w-4xl gap-6 grid-cols-2 md:grid-cols-4 items-start"
			>
				<div
					class="relative overflow-hidden rounded-lg border bg-background p-2"
				>
					<div
						class="flex h-[150px] flex-col items-center justify-center rounded-md p-6 text-center"
					>
						<!-- NER Analysed Today: Brain/AI icon -->
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="h-12 w-12 mb-4 text-blue-500"
							><path d="M17 7a5 5 0 0 0-10 0v10a5 5 0 0 0 10 0V7z"
							></path><path d="M12 2v2"></path><path d="M12 20v2"
							></path><path d="M5 7H3"></path><path d="M21 7h-2"
							></path></svg
						>
						<div class="space-y-2">
							<h3 class="font-bold text-2xl">{db.total_ner_today}</h3>
							<p class="text-sm text-muted-foreground">
								NER Analysed Today
							</p>
						</div>
					</div>
				</div>
				<div
					class="relative overflow-hidden rounded-lg border bg-background p-2"
				>
					<div
						class="flex h-[150px] flex-col items-center justify-center rounded-md p-6 text-center"
					>
						<!-- Articles Today: Newspaper icon -->
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="h-12 w-12 mb-4 text-green-500"
							><rect x="2" y="7" width="20" height="15" rx="2"
							></rect><path d="M16 3v4"></path><path d="M8 3v4"
							></path><path d="M2 11h20"></path><path d="M6 15h4"
							></path><path d="M6 19h4"></path></svg
						>
						<div class="space-y-2">
							<h3 class="font-bold text-2xl">
								{db.total_articles_today}
							</h3>
							<p class="text-sm text-muted-foreground">
								Articles Today
							</p>
						</div>
					</div>
				</div>
				<div
					class="relative overflow-hidden rounded-lg border bg-background p-2"
				>
					<div
						class="flex h-[150px] flex-col items-center justify-center rounded-md p-6 text-center"
					>
						<!-- Articles This Week: Calendar/Week icon -->
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="h-12 w-12 mb-4 text-yellow-500"
							><rect x="3" y="4" width="18" height="18" rx="2"
							></rect><path d="M16 2v4"></path><path d="M8 2v4"
							></path><path d="M3 10h18"></path><rect
								x="7"
								y="14"
								width="10"
								height="4"
								rx="1"></rect></svg
						>
						<div class="space-y-2">
							<h3 class="font-bold text-2xl">
								{db.total_articles_week}
							</h3>
							<p class="text-sm text-muted-foreground">
								Articles This Week
							</p>
						</div>
					</div>
				</div>
				<div
					class="relative overflow-hidden rounded-lg border bg-background p-2"
				>
					<div
						class="flex h-[150px] flex-col items-center justify-center rounded-md p-6 text-center"
					>
						<!-- Total Articles: Database/Archive icon -->
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="h-12 w-12 mb-4 text-purple-500"
							><ellipse cx="12" cy="5" rx="9" ry="3"></ellipse><path
								d="M3 5v14c0 1.7 4 3 9 3s9-1.3 9-3V5"></path><path
								d="M3 12c0 1.7 4 3 9 3s9-1.3 9-3"></path></svg
						>
						<div class="space-y-2">
							<h3 class="font-bold text-2xl">
								{db.total_articles_total}
							</h3>
							<p class="text-sm text-muted-foreground">
								Total Articles
							</p>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Visualization Exploration Section -->
		<div
			id="exploration-section"
			class="mt-16 text-center min-h-screen flex flex-col justify-center"
		>
			<h2 class="text-3xl font-bold mb-4">Explore Our Visualizations</h2>
			<p class="text-muted-foreground mb-12 text-lg">
				Dive deeper into the data with our interactive visualizations
			</p>
			
			<div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto">
				<!-- World Map Button -->
				<a 
					href="/world-map" 
					class="group relative overflow-hidden rounded-xl border bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/20 dark:to-blue-900/20 p-8 text-center transition-all duration-300 hover:scale-105 hover:shadow-xl"
				>
					<div class="flex flex-col items-center space-y-4">
						<div class="rounded-full bg-blue-500 p-4 group-hover:bg-blue-600 transition-colors">
							<svg 
								xmlns="http://www.w3.org/2000/svg" 
								width="32" 
								height="32" 
								viewBox="0 0 24 24" 
								fill="none" 
								stroke="white" 
								stroke-width="2" 
								stroke-linecap="round" 
								stroke-linejoin="round"
							>
								<circle cx="12" cy="12" r="10"></circle>
								<path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>
								<path d="M2 12h20"></path>
							</svg>
						</div>
						<h3 class="text-xl font-bold text-blue-700 dark:text-blue-300">World Map</h3>
						<p class="text-sm text-muted-foreground">
							Explore global news coverage and entity distribution across countries
						</p>
					</div>
				</a>

				<!-- Temporal Trends Button -->
				<a 
					href="/temporal-trends" 
					class="group relative overflow-hidden rounded-xl border bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/20 dark:to-purple-900/20 p-8 text-center transition-all duration-300 hover:scale-105 hover:shadow-xl"
				>
					<div class="flex flex-col items-center space-y-4">
						<div class="rounded-full bg-purple-500 p-4 group-hover:bg-purple-600 transition-colors">
							<svg 
								xmlns="http://www.w3.org/2000/svg" 
								width="32" 
								height="32" 
								viewBox="0 0 24 24" 
								fill="none" 
								stroke="white" 
								stroke-width="2" 
								stroke-linecap="round" 
								stroke-linejoin="round"
							>
								<path d="M3 3v18h18"></path>
								<path d="M18.7 8l-5.1 5.2-2.8-2.7L7 14.3"></path>
							</svg>
						</div>
						<h3 class="text-xl font-bold text-purple-700 dark:text-purple-300">Temporal Trends</h3>
						<p class="text-sm text-muted-foreground">
							Analyze how topics and entities evolve over time
						</p>
					</div>
				</a>

				<!-- Network Button -->
				<a 
					href="/network" 
					class="group relative overflow-hidden rounded-xl border bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/20 dark:to-green-900/20 p-8 text-center transition-all duration-300 hover:scale-105 hover:shadow-xl"
				>
					<div class="flex flex-col items-center space-y-4">
						<div class="rounded-full bg-green-500 p-4 group-hover:bg-green-600 transition-colors">
							<svg 
								xmlns="http://www.w3.org/2000/svg" 
								width="32" 
								height="32" 
								viewBox="0 0 24 24" 
								fill="none" 
								stroke="white" 
								stroke-width="2" 
								stroke-linecap="round" 
								stroke-linejoin="round"
							>
								<path d="M9 12l2 2 4-4"></path>
								<circle cx="21" cy="11" r="8"></circle>
								<path d="M21 21l-4.35-4.35"></path>
								<circle cx="12" cy="12" r="3"></circle>
								<path d="M12 1v6m6 6h6M1 12h6m6 6v6"></path>
							</svg>
						</div>
						<h3 class="text-xl font-bold text-green-700 dark:text-green-300">Network</h3>
						<p class="text-sm text-muted-foreground">
							Discover connections and relationships between entities
						</p>
					</div>
				</a>
			</div>

			<div class="mt-12">
				<a
					href="#"
					class="inline-flex items-center justify-center rounded-md border border-input bg-background px-6 py-3 text-sm font-medium shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground"
				>
					🧑‍💻 View on GitHub
				</a>
			</div>
		</div>
	</main>
</Layout>

<script>
	import React from "react";
	import ReactDOM from "react-dom/client";
	import WorldMapNER from "../components/world-map/WorldMapNER";
	import TopicTable from "../components/TopicTable";
	import TopicTrendChart from "../components/TopicTrendChart";
	import EntityPowerNetwork from "../components/EntityPowerNetwork";
	import { ScrollAnimationController, animationStyles } from "../lib/animations";

	// Inject animation styles
	const styleSheet = document.createElement('style');
	styleSheet.textContent = animationStyles;
	document.head.appendChild(styleSheet);

	// Initialize animation controller
	let animationController: ScrollAnimationController;

	// Function to update all entity references
	function updateEntityReferences(entity: string) {
		const refs = document.querySelectorAll('.top-entity-ref');
		refs.forEach((ref) => {
			ref.textContent = entity.toUpperCase();
		});
	}

	// Function to create a custom world map that shows coverage of the top entity
	function createCustomWorldMap(topEntity: string) {
		const worldMapElement = document.getElementById("world-map-recap");
		if (worldMapElement && topEntity) {
			const root = ReactDOM.createRoot(worldMapElement);
			root.render(React.createElement(WorldMapNER, { entity: topEntity }));
		}
	}

	// Function to create filtered network showing only connections to the top entity
	function createFilteredNetwork(topEntity: string) {
		const networkElement = document.getElementById("network-recap");
		if (networkElement && topEntity) {
			const root = ReactDOM.createRoot(networkElement);

			// Get today's date in DD.MM.YYYY format
			const today = new Date();
			const day = today.getDate().toString().padStart(2, "0");
			const month = (today.getMonth() + 1).toString().padStart(2, "0");
			const year = today.getFullYear();
			const formattedDate = `${day}.${month}.${year}`;

			root.render(
				React.createElement(EntityPowerNetwork, {
					targetEntity: topEntity,
					date: formattedDate,
					className: "w-full h-full",
				}),
			);
		}
	}

	// Function to load temporal trends data and create components
	async function createTemporalTrends(topEntity: string) {
		const tableElement = document.getElementById("temporal-table-recap");
		const chartElement = document.getElementById("temporal-chart-recap");

		if (!tableElement || !chartElement) return;

		try {
			// Helper functions
			function formatDate(date: Date): string {
				const day = date.getDate().toString().padStart(2, "0");
				const month = (date.getMonth() + 1).toString().padStart(2, "0");
				const year = date.getFullYear();
				return `${day}.${month}.${year}`;
			}

			function getLastNDays(n: number): string[] {
				const dates: string[] = [];
				const today = new Date();

				for (let i = n - 1; i >= 0; i--) {
					const date = new Date(today);
					date.setDate(today.getDate() - i);
					dates.push(formatDate(date));
				}

				return dates;
			}

			async function loadTopicsForDate(date: string): Promise<any> {
				try {
					const response = await fetch(`/data/${date}/topics.json`);
					if (!response.ok) return null;
					return await response.json();
				} catch (error) {
					console.warn(`Error loading data for ${date}:`, error);
					return null;
				}
			}

			// Get the last 7 days
			const last7Days = getLastNDays(7);
			const today = last7Days[last7Days.length - 1];
			const yesterday = last7Days[last7Days.length - 2];

			// Load data for all days
			const dailyDataPromises = last7Days.map(async (date) => ({
				date,
				data: await loadTopicsForDate(date),
			}));

			const dailyDataResults = await Promise.all(dailyDataPromises);

			// Filter out failed loads and create data map
			const dailyData: any = {};
			const availableDates: string[] = [];

			dailyDataResults.forEach(({ date, data }) => {
				if (data) {
					dailyData[date] = data;
					availableDates.push(date);
				}
			});

			if (availableDates.length === 0) {
				console.warn("No temporal data available");
				return;
			}

			// Get today's and yesterday's data
			const todayData = dailyData[today];
			const yesterdayData = dailyData[yesterday] || null;

			if (!todayData) {
				console.warn("Today's data not available");
				return;
			}

			// Process table data for top 5 topics only
			const processTableData = (todayData: any, yesterdayData: any) => {
				let yesterdayRankings: any = {};
				if (yesterdayData) {
					const yesterdayEntries = Object.entries(yesterdayData)
						.filter(([_, score]) => typeof score === "number" && score > 0)
						.sort(([, a], [, b]) => Number(b) - Number(a));

					yesterdayEntries.forEach(([topic, _], index) => {
						yesterdayRankings[topic] = index + 1;
					});
				}

				const tableData = Object.entries(todayData)
					.map(([topic, todayScore]) => {
						const yesterdayScore =
							yesterdayData && yesterdayData[topic] ? yesterdayData[topic] : 0;

						let isTrendingUp = null;
						let isPresenceTrendingUp = null;
						let percentageChange = null;

						if (yesterdayScore === 0) {
							percentageChange =
								Number(todayScore) > 0 ? Number(todayScore) : 0;
							isPresenceTrendingUp = Number(todayScore) > 0 ? true : null;
						} else {
							percentageChange = parseFloat(
								(Number(todayScore) - Number(yesterdayScore)).toFixed(1),
							);
							isPresenceTrendingUp =
								Number(todayScore) > Number(yesterdayScore)
									? true
									: Number(todayScore) < Number(yesterdayScore)
										? false
										: null;
						}

						return {
							topic,
							latestScore: Number(todayScore),
							isTrendingUp,
							isPresenceTrendingUp,
							percentageChange,
						};
					})
					.filter((item) => item.latestScore > 0)
					.sort((a, b) => b.latestScore - a.latestScore)
					.slice(0, 5) // Only top 5 topics
					.map((item, index) => {
						const todayRank = index + 1;
						const yesterdayRank = yesterdayRankings[item.topic];

						let isTrendingUp = null;
						if (yesterdayRank !== undefined) {
							if (todayRank < yesterdayRank) {
								isTrendingUp = true;
							} else if (todayRank > yesterdayRank) {
								isTrendingUp = false;
							} else {
								isTrendingUp = null;
							}
						} else {
							isTrendingUp = true;
						}

						return {
							...item,
							rank: todayRank,
							isTrendingUp,
						};
					});

				return tableData;
			};

			// Process chart data
			const processChartData = (dailyData: any, dates: string[]) => {
				const topics: any = {};

				// Get top 5 topics from today
				const top5Topics = Object.entries(todayData)
					.filter(([_, score]) => typeof score === "number" && score > 0)
					.sort(([, a], [, b]) => Number(b) - Number(a))
					.slice(0, 5)
					.map(([topic, _]) => topic);

				// Build chart data for top 5 topics only
				top5Topics.forEach((topic: string) => {
					topics[topic] = {};
					dates.forEach((date: string) => {
						topics[topic][date] =
							dailyData[date] && dailyData[date][topic]
								? dailyData[date][topic]
								: 0;
					});
				});

				return {
					topics,
					dateRanges: dates,
				};
			};

			// Process data
			const tableData = processTableData(todayData, yesterdayData);
			const chartData = processChartData(dailyData, availableDates);
			const allTopTopics = tableData.map((item) => item.topic);

			// Create React components
			const tableRoot = ReactDOM.createRoot(tableElement);
			const chartRoot = ReactDOM.createRoot(chartElement);

			tableRoot.render(
				React.createElement(TopicTable, {
					data: tableData,
					defaultSelectedTopic: null,
				}),
			);

			chartRoot.render(
				React.createElement(TopicTrendChart, {
					data: chartData,
					defaultTopic: null,
					defaultTopics: allTopTopics,
				}),
			);
		} catch (error) {
			console.error("Error creating temporal trends:", error);
		}
	}

	// Main initialization function
	async function initializeRecap() {
		// Initialize animation controller first
		animationController = new ScrollAnimationController();
		
		// Register sections for animation
		const sectionIds = ['hero-section', 'recap-section', 'temporal-section', 'network-section', 'statistics-section', 'exploration-section'];
		animationController.registerSections(sectionIds);
		
		// Register the top entity span
		animationController.registerTopEntitySpan('top-entity');

		// Load actual top entity from today's data
		async function loadTopEntity(): Promise<string> {
			try {
				const today = new Date();
				const day = today.getDate().toString().padStart(2, "0");
				const month = (today.getMonth() + 1).toString().padStart(2, "0");
				const year = today.getFullYear();
				const formattedDate = `${day}.${month}.${year}`;

				const response = await fetch(`/data/${formattedDate}/topics.json`);
				if (!response.ok) {
					console.warn(`Could not load today's data (${formattedDate}), falling back to Donald Trump`);
					return "Donald Trump";
				}

				const data = await response.json();
				
				// Find the entity with the highest score
				const topEntry = Object.entries(data)
					.filter(([_, score]) => typeof score === "number" && score > 0)
					.sort(([, a], [, b]) => Number(b) - Number(a))[0];

				if (topEntry) {
					return topEntry[0];
				} else {
					console.warn("No valid entities found in today's data, falling back to Donald Trump");
					return "Donald Trump";
				}
			} catch (error) {
				console.error("Error loading top entity:", error);
				return "Donald Trump";
			}
		}

		const topEntity = await loadTopEntity();

		// Update the main top entity display
		animationController.updateTopEntity(topEntity);
		
		// Update all other entity references
		updateEntityReferences(topEntity);

		// Initialize all visualizations with coordinated timing
		// Start world map first since it's needed for hero section animation
		createCustomWorldMap(topEntity);
		
		// Then load other visualizations with delays
		setTimeout(() => createFilteredNetwork(topEntity), 800);
		setTimeout(() => createTemporalTrends(topEntity), 1200);
	}

	// Start the initialization when the page loads
	document.addEventListener("DOMContentLoaded", initializeRecap);
	
	// Cleanup when page unloads
	window.addEventListener("beforeunload", () => {
		if (animationController) {
			animationController.destroy();
		}
		window.removeEventListener('wheel', handleWheelScroll);
	});

	// Smooth scrolling logic
	let isScrolling = false;
	let scrollTimeout: number | undefined;
	const scrollCooldown = 800;
	let currentSectionIndex = 0;
	const sections = ['hero-section', 'recap-section', 'temporal-section', 'network-section', 'statistics-section', 'exploration-section'];

	function scrollToSection(index: number) {
		if (index >= 0 && index < sections.length) {
			const sectionId = sections[index];
			const sectionElement = document.getElementById(sectionId);
			if (sectionElement) {
				isScrolling = true;
				sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
				currentSectionIndex = index;
				setTimeout(() => {
					isScrolling = false;
				}, scrollCooldown);
			}
		}
	}

	function handleWheelScroll(event: WheelEvent) {
		if (isScrolling) {
			event.preventDefault();
			return;
		}

		clearTimeout(scrollTimeout);

		scrollTimeout = window.setTimeout(() => {
			if (event.deltaY > 0) {
				// Scrolling down
				if (currentSectionIndex < sections.length - 1) {
					scrollToSection(currentSectionIndex + 1);
				}
			} else if (event.deltaY < 0) {
				// Scrolling up
				if (currentSectionIndex > 0) {
					scrollToSection(currentSectionIndex - 1);
				}
			}
		}, 50);
		
		event.preventDefault(); 
	}

	// Add event listener after DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		// Initialize currentSectionIndex based on initial scroll position or default to 0
		const initialScrollY = window.scrollY;
		for(let i=0; i < sections.length; i++){
			const sectionElement = document.getElementById(sections[i]);
			if(sectionElement && sectionElement.offsetTop >= initialScrollY){
				currentSectionIndex = i;
				break;
			}
		}
		// Make sure the first section is visible on load
		if (window.scrollY < document.getElementById(sections[0])!.offsetHeight * 0.5 ) {
			 scrollToSection(0);
		}

		window.addEventListener('wheel', handleWheelScroll, { passive: false });
	});
</script>

<style is:global>
	html {
		box-sizing: border-box;
		height: 100%;
		overflow-y: hidden;
	}

	*, *::before, *::after {
		box-sizing: inherit;
	}

	body {
		height: 100%;
		overflow-y: scroll;
		margin: 0;
	}
</style>

<style>
	/* Ensure visualizations fit properly */
	#world-map-recap,
	#network-recap,
	#temporal-trends-recap,
	#temporal-table-recap,
	#temporal-chart-recap {
		overflow: hidden;
	}

	/* Entity reference styling */
	.top-entity-ref {
		font-weight: 700;
		transition: all 0.3s ease;
	}

	/* Section layout improvements */
	#hero-section,
	#recap-section,
	#temporal-section,
	#network-section,
	#statistics-section,
	#exploration-section {
		scroll-margin-top: 2rem;
	}

	/* Loading animation for the top entity */
	#top-entity {
		transition: all 0.5s ease;
	}

	/* Responsive design */
	@media (max-width: 768px) {
		#top-entity {
			font-size: 3rem;
		}

		.container {
			padding-left: 1rem;
			padding-right: 1rem;
		}

		/* Stack temporal trends vertically on mobile */
		.grid.lg\\:grid-cols-7 {
			grid-template-columns: 1fr;
		}

		/* Adjust section heights for mobile */
		#hero-section,
		#recap-section,
		#temporal-section,
		#network-section,
		#statistics-section,
		#exploration-section {
			min-height: 100vh;
			padding: 2rem 0;
		}
	}

	/* Custom animations */
	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.fade-in {
		animation: fadeIn 0.6s ease-out;
	}

	/* Improved dark theme support */
	.dark .top-entity-ref {
		color: inherit;
	}

	/* Better visualization container styling */
	#world-map-recap,
	#network-recap {
		border-radius: 12px;
		background: rgba(255, 255, 255, 0.05);
		backdrop-filter: blur(10px);
	}

	.dark #world-map-recap,
	.dark #network-recap {
		background: rgba(0, 0, 0, 0.2);
	}
</style>
