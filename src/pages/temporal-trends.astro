---
import Layout from '@/layouts/Layout.astro';
import topicsData from '../../public/data/temporal_trends/topics.json';
import TopicTable from '@/components/TopicTable';
import TopicTrendChart from '@/components/TopicTrendChart';

// Add type definitions at the top of the script section
type TopicData = {
    [topic: string]: {
        [dateRange: string]: number;
    };
};

type TableRowData = {
    rank: number;
    topic: string;
    latestScore: number;
    isTrendingUp: boolean | null;
    percentageChange: number | null;
};

// Function to parse date range string "DD-DD.MM" into a comparable format (e.g., Date object or YYYYMMDD)
// Assuming year is current year for simplicity, might need adjustment for year changes
const parseDateRange = (range: string): Date => {
    const currentYear = new Date().getFullYear();
    const [days, month] = range.split('.');
    const startDate = parseInt(days.split('-')[1], 10);
    return new Date(currentYear, parseInt(month, 10) - 1, startDate);
};

// Assert the type of imported JSON data
const typedTopicsData = topicsData as TopicData;

// Get all unique date ranges and sort them
const allDateRanges = [...new Set(Object.values(typedTopicsData).flatMap(topic => Object.keys(topic)))]
    .sort((a, b) => parseDateRange(a).getTime() - parseDateRange(b).getTime());

const latestDateRange = allDateRanges[allDateRanges.length - 1];
const previousDateRange = allDateRanges[allDateRanges.length - 2];

// Process data for the table
const tableData: TableRowData[] = Object.entries(typedTopicsData)
    .map(([topic, dates]) => ({ topic, dates })) // Keep intermediate structure for type safety
    .map(({ topic, dates }) => {
        const currentLatestScore = dates[latestDateRange] ?? 0;
        const originalPreviousScoreValue = dates[previousDateRange]; // Capture original value to check for actual absence
        const currentPreviousScore = originalPreviousScoreValue ?? 0;
        
        let isTrendingUp: boolean | null = null;
        let percentageChange: number | null = null;

        if (originalPreviousScoreValue === undefined || originalPreviousScoreValue === null) {
            // Case 1: Previous score was genuinely missing (null/undefined in the data or previousDateRange doesn't exist)
            // User request: "when the % goes from null to X, the percentage change should be X"
            percentageChange = currentLatestScore;
            if (currentLatestScore > 0) {
                isTrendingUp = true;
            } else if (currentLatestScore < 0) { // Handles if scores can be negative
                isTrendingUp = false;
            } else { // currentLatestScore is 0 (i.e., went from null/absent to 0)
                isTrendingUp = null; // Neutral indicator
            }
        } else {
            // Case 2: Previous score was present (originalPreviousScoreValue is a number, including 0)
            // currentPreviousScore is therefore also that number.
            if (currentLatestScore === currentPreviousScore) {
                // User request: "when the % doesn't change, a neutral indicator is displayed"
                percentageChange = 0;
                isTrendingUp = null; // Neutral indicator
            } else {
                // Scores are different
                isTrendingUp = currentLatestScore > currentPreviousScore;
                if (currentPreviousScore === 0) {
                    // Previous was 0, current is different.
                    // Assuming non-negative scores, currentLatestScore must be > 0.
                    percentageChange = Infinity; 
                } else {
                    // Previous score was not 0, and current score is different.
                    percentageChange = parseFloat((currentLatestScore - currentPreviousScore).toFixed(1));
                }
            }
        }

        return {
            topic,
            latestScore: currentLatestScore, // Ensure table uses the coalesced score
            isTrendingUp,
            percentageChange,
        };
    })
    .sort((a, b) => b.latestScore - a.latestScore) // Sort by latest score descending for ranking
    .map((item, index) => ({ ...item, rank: index + 1 })); // Add rank

// Determine the top topic for default selection
const topTopicName = tableData.length > 0 ? tableData[0].topic : null;

// Prepare data structure for the chart component
// Pass all data, chart component can filter/process as needed
const chartDataInput = {
    topics: typedTopicsData, // Use the typed data
    dateRanges: allDateRanges,
};

---

<Layout title="Temporal Trends">
    <main class="container mx-auto py-3">
        <h1 class="text-3xl font-bold mb-6 text-center">Topic Temporal Trends</h1>
        <div class="grid grid-cols-1 md:grid-cols-5 gap-8 h-[calc(100vh-200px)]">
            <div class="border rounded-lg p-4 overflow-y-auto md:col-span-2">
                <h2 class="text-xl font-semibold mb-4">Topic Rankings for week: {latestDateRange}</h2>
                <div class="text-sm text-gray-500 dark:text-gray-400">
                    <p><span class="font-bold">Click on a row</span> to see the trend in the chart !</p>
                </div> 
                <TopicTable client:only="react" data={tableData} defaultSelectedTopic={topTopicName} />
            </div>
            <div class="border rounded-lg p-4 flex flex-col md:col-span-3">
                 <h2 class="text-xl font-semibold mb-4">Trend Evolution Comparison</h2>
                <div class="flex-grow min-h-[400px]">
                     <TopicTrendChart client:only="react" data={chartDataInput} defaultTopic={topTopicName} />
                </div>
            </div>
        </div>
    </main>
</Layout>
